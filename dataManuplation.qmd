---
title: "Untitled"
format: html
editor: visual
---


```{r}
library(dplyr)
library(tidyverse)
data(iris)
str(iris)
#head(iris)
summary(iris) # we also know the missing data, which is like the function of the below code
#apply(iris, 2, function(x) sum(is.na(x))) # check the missing data
# know the total rows of data
nrow(iris)

# Because we can't take the mean of the Species column, exclude it
iris <- iris[,-5]
head(iris, 3)

# appply has more specific function

apply(iris, 
      MARGIN = 2,  # rows = 1, columns = 2 (just like [rows, cols])
      FUN = mean)

# Apply mean to each row and then get the first 10 rows
apply(iris, 
      MARGIN = 1, 
      FUN = mean) %>% head(10)

# We can also use the apply function to add a new row to the data frame
average <- apply( 
  iris,        # what object do we want to apply the function to
  MARGIN=2,    # rows = 1, columns = 2, (same order as [rows, cols]
  FUN=mean     # what function do we want to apply
)
iris <- rbind(iris, average)
iris %>% head(3)


```

# the pipe notation %>%

```{r}
mtcars %>%
  filter(mpg > 20) %>%  # Filter rows where mpg > 20
  select(mpg, wt) %>%   # Select only the mpg and wt columns
  summarise(avg_mpg = mean(mpg), avg_wt = mean(wt))
```


# other functions of dplyr

The foundational operations to perform on a data set are:

Subsetting - Returns a with only particular columns or rows

select - Selecting a subset of columns by name or column number.

filter - Selecting a subset of rows from a data frame based on logical expressions.

slice - Selecting a subset of rows by row number.

arrange - Re-ordering the rows of a data frame.

mutate - Add a new column that is some function of other columns.

summarise - calculate some summary statistic of a column of data. This collapses a set of rows into a single row.

## select

```{r}
head(starwars)
```

```{r}
starwars %>% 
  select(name, height, mass) 

# or

starwars %>% 
  select(name:mass) # name to mass


# 2

```{r}
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
```

# lappy

```{r}

lapply(x, quantile, probs = 1:3/4) # 1:3/4 将这个序列除以 4，得到 [0.25, 0.5, 0.75]，表示计算 25%、50% 和 75% 的分位数。

```
# sapply

```{r}
sapply(x, quantile, probs = 1:3/4)
```

lappy and sapply only have different output but the same function



# tibble


A tibble, or tbl_df, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects.



```{r}
data <- data.frame(a = 1:3, b = letters[1:3], c = Sys.Date() - 1:3)
data
as_tibble(data)
```



```

